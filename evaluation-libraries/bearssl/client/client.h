/*
 * Copyright (c) 2016 Thomas Pornin <pornin@bolet.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <arpa/inet.h>
#include <bearssl.h>
#include <errno.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

/*  certs/ca.crt 
    Code generated by running "brssl ta ca.crt"
*/
static const unsigned char TA0_DN[] = {
    0x30, 0x14, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C,
    0x09, 0x54, 0x68, 0x65, 0x73, 0x69, 0x73, 0x20, 0x43, 0x41};

static const unsigned char TA0_RSA_N[] = {
    0xD2, 0x20, 0x8A, 0x5D, 0x20, 0x05, 0x4B, 0x15, 0x3D, 0x00, 0x29, 0x4A,
    0xFB, 0x95, 0x0F, 0x7A, 0x3E, 0x04, 0x61, 0xC2, 0x95, 0x85, 0x80, 0xAD,
    0xD9, 0xA8, 0xA3, 0x07, 0x22, 0xB1, 0x60, 0xA2, 0x1C, 0xA0, 0x90, 0xA0,
    0x14, 0x30, 0x45, 0x3D, 0xF6, 0xC6, 0x26, 0x5D, 0xA3, 0xE7, 0x05, 0x6A,
    0xFC, 0x5C, 0x3F, 0x8B, 0xE4, 0xF1, 0xB1, 0xD1, 0xCF, 0x43, 0x7C, 0x82,
    0x39, 0xEB, 0x81, 0xC5, 0xF9, 0x55, 0x03, 0x7E, 0x68, 0x1C, 0x6A, 0x52,
    0x1C, 0x29, 0x0B, 0x15, 0x43, 0x4B, 0x0D, 0xA7, 0x99, 0xCA, 0xBA, 0x7E,
    0xFD, 0x19, 0xB6, 0xA4, 0x00, 0xFD, 0x64, 0xE9, 0xBC, 0x87, 0xA1, 0x48,
    0xBE, 0x3F, 0x0D, 0xE0, 0xF1, 0xD7, 0xE6, 0x31, 0x99, 0x81, 0xE2, 0xC3,
    0x4B, 0x21, 0xFE, 0x6C, 0x70, 0x57, 0x9F, 0x86, 0x61, 0xA3, 0x95, 0x6A,
    0xC9, 0x0E, 0x1E, 0xE1, 0x66, 0x9F, 0x5D, 0xD2, 0xE0, 0x65, 0x6D, 0xB7,
    0xE5, 0x45, 0x93, 0xE0, 0xCA, 0x9E, 0xA5, 0x2E, 0x94, 0x9D, 0x1F, 0x1A,
    0x96, 0x02, 0xCF, 0x7B, 0xE6, 0x39, 0x6C, 0x0C, 0x34, 0xA4, 0xA1, 0x7E,
    0xB3, 0x38, 0x5F, 0x5D, 0x46, 0x40, 0x90, 0xAF, 0x8C, 0x56, 0x60, 0xEC,
    0xB9, 0x86, 0x78, 0xF6, 0x36, 0x38, 0x35, 0x28, 0x88, 0xC0, 0xFA, 0x57,
    0x9D, 0xFE, 0x94, 0x97, 0x2F, 0x0A, 0x31, 0x41, 0x02, 0xE6, 0xFA, 0x03,
    0x72, 0x98, 0x64, 0x71, 0x28, 0x6D, 0xFB, 0x12, 0x88, 0x7B, 0x41, 0xA7,
    0x8E, 0xBB, 0x6C, 0x16, 0x70, 0x86, 0x58, 0x55, 0x58, 0xF3, 0xE8, 0x60,
    0x24, 0xBF, 0x0D, 0x9C, 0x78, 0x8B, 0x0B, 0xCB, 0xD5, 0xA8, 0x8E, 0x3E,
    0x9F, 0x71, 0x46, 0x2A, 0x5A, 0x16, 0xE8, 0xE8, 0x63, 0xBC, 0x5E, 0x0A,
    0x5D, 0xE9, 0xF0, 0x99, 0xAB, 0x49, 0x8E, 0x44, 0xB7, 0x36, 0xEF, 0xC6,
    0x42, 0xC1, 0xC3, 0x71};

static const unsigned char TA0_RSA_E[] = {
    0x01, 0x00, 0x01};

static const br_x509_trust_anchor TAs[1] = {
    {{(unsigned char *)TA0_DN, sizeof TA0_DN},
     BR_X509_TA_CA,
     {BR_KEYTYPE_RSA,
      {.rsa = {
           (unsigned char *)TA0_RSA_N,
           sizeof TA0_RSA_N,
           (unsigned char *)TA0_RSA_E,
           sizeof TA0_RSA_E,
       }}}}};
//only one certificate
#define TAs_NUM 1

/*
 * Connect to the specified host and port. The connected socket is
 * returned, or -1 on error.
 */
static int
host_connect(const char *host, const char *port) {
    struct addrinfo hints, *si, *p;
    int fd;
    int err;

    memset(&hints, 0, sizeof hints);
    hints.ai_family = PF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    err = getaddrinfo(host, port, &hints, &si);
    if (err != 0) {
        fprintf(stderr, "ERROR: getaddrinfo(): %s\n",
                gai_strerror(err));
        return -1;
    }
    fd = -1;
    for (p = si; p != NULL; p = p->ai_next) {
        struct sockaddr *sa;
        void *addr;
        char tmp[INET6_ADDRSTRLEN + 50];

        sa = (struct sockaddr *)p->ai_addr;
        if (sa->sa_family == AF_INET) {
            addr = &((struct sockaddr_in *)sa)->sin_addr;
        } else if (sa->sa_family == AF_INET6) {
            addr = &((struct sockaddr_in6 *)sa)->sin6_addr;
        } else {
            addr = NULL;
        }
        if (addr != NULL) {
            inet_ntop(p->ai_family, addr, tmp, sizeof tmp);
        } else {
            sprintf(tmp, "<unknown family: %d>",
                    (int)sa->sa_family);
        }
        //fprintf(stderr, "connecting to: %s\n", tmp);
        fd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
        if (fd < 0) {
            perror("socket()");
            continue;
        }
        if (connect(fd, p->ai_addr, p->ai_addrlen) < 0) {
            perror("connect()");
            close(fd);
            continue;
        }
        break;
    }
    if (p == NULL) {
        freeaddrinfo(si);
        fprintf(stderr, "ERROR: failed to connect\n");
        return -1;
    }
    freeaddrinfo(si);
    //fprintf(stderr, "connected.\n");
    return fd;
}

/*
 * Low-level data read callback for the simplified SSL I/O API.
 */
static int
sock_read(void *ctx, unsigned char *buf, size_t len) {
    for (;;) {
        ssize_t rlen;

        rlen = read(*(int *)ctx, buf, len);
        if (rlen <= 0) {
            if (rlen < 0 && errno == EINTR) {
                continue;
            }
            return -1;
        }
        return (int)rlen;
    }
}

/*
 * Low-level data write callback for the simplified SSL I/O API.
 */
static int
sock_write(void *ctx, const unsigned char *buf, size_t len) {
    for (;;) {
        ssize_t wlen;

        wlen = write(*(int *)ctx, buf, len);
        if (wlen <= 0) {
            if (wlen < 0 && errno == EINTR) {
                continue;
            }
            return -1;
        }
        return (int)wlen;
    }
}